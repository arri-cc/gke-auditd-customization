apiVersion: v1
kind: Namespace
metadata:
  name: custom-auditd-logging
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: auditd-rules
  namespace: custom-auditd-logging
  labels:
    app: custom-auditd-logging
data:
  audit.rules: |
    ## This file is automatically generated from /etc/audit/rules.d
    -D

    ## larger buffer
    -b 8192
    ## syslog failure mode
    -f 1
    ## ignore syntax errors
    -i
    -a never,exclude -F msgtype!=CONFIG_CHANGE -F msgtype!=AVC -F msgtype!=USER_AVC -F msgtype!=SECCOMP -F msgtype!=SYSCALL -F msgtype!=PATH -F msgtype!=TTY -F msgtype!=USER_ACCT -F msgtype!=USER_START -F msgtype!=USER_END
    -w /sbin/auditctl -p x -k test_audit_exec
    -w /bin/ls -p x -k test_audit_exec
    -w /usr/bin/curl -p x -k test_audit_exec
    -w /etc/audit/ -k test_audit_folders
    ## enable auditd logging
    -e 1
    ## lock auditd rules
    -e 2
---
# adapted for demo purposes from
# https://raw.githubusercontent.com/GoogleCloudPlatform/k8s-node-tools/master/os-audit/cos-auditd-logging.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: custom-auditd-logging-fluentd
  namespace: custom-auditd-logging
  annotations:
    kubernetes.io/description: 'ConfigMap for Linux auditd logging daemonset on COS nodes.'
data:
  google-fluentd.conf: |-
    <source>
      @type systemd
      filters [{ "SYSLOG_IDENTIFIER": "audit" }]
      pos_file /var/log/gcp-journald-audit.pos
      read_from_head true
      tag linux-auditd-customized
    </source>

    # Do not collect fluentd's own logs to avoid infinite loops.
    <match fluent.**>
      @type null
    </match>

    <match **>
      @type google_cloud

      enable_monitoring false
      split_logs_by_tag false
      detect_subservice false
      buffer_type file
      buffer_path /var/log/fluentd-buffers/system.audit.buffer
      buffer_queue_full_action block
      buffer_chunk_limit 512k
      buffer_queue_limit 2
      flush_interval 5s
      max_retry_wait 30
      disable_retry_limit
      num_threads 2
      use_grpc true
    </match>
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: custom-auditd-logging
  namespace: custom-auditd-logging
  annotations:
    kubernetes.io/description: "DaemonSet that enables Linux auditd logging with custom rules on COS nodes"
spec:
  selector:
    matchLabels:
      app: custom-auditd-logging
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: custom-auditd-logging
        app: custom-auditd-logging
    spec:
      hostNetwork: true
      hostPID: true
      nodeSelector:
        # currently uses cos selector as this solution is only compatible with COS image based nodes
        cloud.google.com/gke-os-distribution: cos
      volumes:
        - name: host
          hostPath:
            path: /
        - name: varlog
          hostPath:
            path: /var/log
        - name: libsystemddir
          hostPath:
            path: /usr/lib64
        - name: config-volume
          configMap:
            defaultMode: 420
            name: custom-auditd-logging-fluentd
        - name: auditd-rules
          configMap:
            name: auditd-rules
            defaultMode: 0644
      initContainers:
        - image: ubuntu:18.04
          name: bootstrap-mkdir
          command:
            - sh
            - -c
            - |
              cp /rules/audit.rules /host/etc/audit/audit.rules \
              && chroot /host auditctl -R /etc/audit/audit.rules
          securityContext:
            privileged: true
          volumeMounts:
            - name: host
              mountPath: /host
            - name: auditd-rules
              mountPath: /rules
      containers:
        - name: custom-auditd-logging-fluentd
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          image: gcr.io/stackdriver-agents/stackdriver-logging-agent:0.6-1.6.0-1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300}; STUCK_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-900}; if [ ! -e /var/log/fluentd-buffers ]; then
                    exit 1;
                  fi; touch -d "${STUCK_THRESHOLD_SECONDS} seconds ago" /tmp/marker-stuck; if [[ -z "$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-stuck -print -quit)" ]]; then
                    rm -rf /var/log/fluentd-buffers;
                    exit 1;
                  fi; touch -d "${LIVENESS_THRESHOLD_SECONDS} seconds ago" /tmp/marker-liveness; if [[ -z "$(find /var/log/fluentd-buffers -type f -newer /tmp/marker-liveness -print -quit)" ]]; then
                    exit 1;
                  fi;
            failureThreshold: 3
            initialDelaySeconds: 600
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/log
              name: varlog
            - mountPath: /host/lib
              name: libsystemddir
              readOnly: true
            - mountPath: /etc/google-fluentd/google-fluentd.conf
              subPath: google-fluentd.conf
              name: config-volume
      tolerations:
        - effect: NoSchedule
          key: node.alpha.kubernetes.io/ismaster
        - effect: NoExecute
          operator: Exists
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate

